### YamlMime:ManagedReference
items:
- uid: Global.Skillsequenze
  commentId: T:Global.Skillsequenze
  id: Skillsequenze
  parent: Global
  children:
  - Global.Skillsequenze.#ctor(System.Single,GameObject,System.Boolean)
  - Global.Skillsequenze.Delay
  - Global.Skillsequenze.ShootInRotatedDirection
  - Global.Skillsequenze.Skill
  langs:
  - csharp
  - vb
  name: Skillsequenze
  nameWithType: Skillsequenze
  fullName: Skillsequenze
  type: Class
  source:
    id: Skillsequenze
    path: ''
    startLine: 9957
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\ncontainer classe to describe skills\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class Skillsequenze
    content.vb: >-
      <Serializable>

      Public Class Skillsequenze
  inheritance:
  - System.Object
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Global.Skillsequenze.#ctor(System.Single,GameObject,System.Boolean)
  commentId: M:Global.Skillsequenze.#ctor(System.Single,GameObject,System.Boolean)
  id: '#ctor(System.Single,GameObject,System.Boolean)'
  parent: Global.Skillsequenze
  langs:
  - csharp
  - vb
  name: Skillsequenze(Single, GameObject, Boolean)
  nameWithType: Skillsequenze.Skillsequenze(Single, GameObject, Boolean)
  fullName: Skillsequenze.Skillsequenze(System.Single, GameObject, System.Boolean)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 9970
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nconstruktor classe\n"
  example: []
  syntax:
    content: public Skillsequenze(float delay, GameObject skill, bool shootInRotatedDirection)
    parameters:
    - id: delay
      type: System.Single
      description: delay between skills
    - id: skill
      type: Global.GameObject
      description: the skill to be used
    - id: shootInRotatedDirection
      type: System.Boolean
      description: if the skill is to be shoot in the rotated direction
    content.vb: Public Sub New(delay As Single, skill As GameObject, shootInRotatedDirection As Boolean)
  overload: Global.Skillsequenze.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.Skillsequenze.Skill
  commentId: P:Global.Skillsequenze.Skill
  id: Skill
  parent: Global.Skillsequenze
  langs:
  - csharp
  - vb
  name: Skill
  nameWithType: Skillsequenze.Skill
  fullName: Skillsequenze.Skill
  type: Property
  source:
    id: Skill
    path: ''
    startLine: 9979
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nretruns skill gameobject\n"
  example: []
  syntax:
    content: public GameObject Skill { get; }
    parameters: []
    return:
      type: Global.GameObject
    content.vb: Public ReadOnly Property Skill As GameObject
  overload: Global.Skillsequenze.Skill*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Global.Skillsequenze.Delay
  commentId: P:Global.Skillsequenze.Delay
  id: Delay
  parent: Global.Skillsequenze
  langs:
  - csharp
  - vb
  name: Delay
  nameWithType: Skillsequenze.Delay
  fullName: Skillsequenze.Delay
  type: Property
  source:
    id: Delay
    path: ''
    startLine: 9989
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nreturns skill delay\n"
  example: []
  syntax:
    content: public float Delay { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Delay As Single
  overload: Global.Skillsequenze.Delay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Global.Skillsequenze.ShootInRotatedDirection
  commentId: P:Global.Skillsequenze.ShootInRotatedDirection
  id: ShootInRotatedDirection
  parent: Global.Skillsequenze
  langs:
  - csharp
  - vb
  name: ShootInRotatedDirection
  nameWithType: Skillsequenze.ShootInRotatedDirection
  fullName: Skillsequenze.ShootInRotatedDirection
  type: Property
  source:
    id: ShootInRotatedDirection
    path: ''
    startLine: 9999
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nreturns and sets if the skill shoots in player direction\n"
  example: []
  syntax:
    content: public bool ShootInRotatedDirection { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ShootInRotatedDirection As Boolean
  overload: Global.Skillsequenze.ShootInRotatedDirection*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Global
  name: Global
  nameWithType: Global
  fullName: Global
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Skillsequenze.#ctor*
  commentId: Overload:Global.Skillsequenze.#ctor
  name: Skillsequenze
  nameWithType: Skillsequenze.Skillsequenze
  fullName: Skillsequenze.Skillsequenze
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Global.GameObject
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: GameObject
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Global.Skillsequenze.Skill*
  commentId: Overload:Global.Skillsequenze.Skill
  name: Skill
  nameWithType: Skillsequenze.Skill
  fullName: Skillsequenze.Skill
- uid: Global.Skillsequenze.Delay*
  commentId: Overload:Global.Skillsequenze.Delay
  name: Delay
  nameWithType: Skillsequenze.Delay
  fullName: Skillsequenze.Delay
- uid: Global.Skillsequenze.ShootInRotatedDirection*
  commentId: Overload:Global.Skillsequenze.ShootInRotatedDirection
  name: ShootInRotatedDirection
  nameWithType: Skillsequenze.ShootInRotatedDirection
  fullName: Skillsequenze.ShootInRotatedDirection
